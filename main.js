(()=>{"use strict";class e{constructor(e){this.apiUrl=e||"/api"}list(){}get(){}create(){}update(){}delete(){}}const s=async e=>{const{method:s="GET",url:t,data:n,headers:r={}}=e,a={method:s,headers:{"Content-Type":"application/json",...r}};n&&(a.body=JSON.stringify(n));try{const e=await fetch(t,a);if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(e){throw console.error("Request failed:",e.message),e}};class t extends e{constructor(){super("https://js-3-hw-08-ws-chat.onrender.com/api"),this.user=null}async create(e){return await s({method:"POST",url:`${this.apiUrl}/new-user`,data:e})}async checkUser(e){return await s({method:"POST",url:`${this.apiUrl}/check-user`,data:{id:e}})}}window.addEventListener("beforeunload",(()=>{sessionStorage.removeItem("currentUserId")}));const n=document.getElementById("root");new class{constructor(e){this.container=e,this.api=new t,this.websocket=null,this.username=null,this.isChatReady=!1,this.pendingMessages=[],this.init()}init(){this.bindToDOM();const e=sessionStorage.getItem("currentUserId");e?this.api.checkUser(e).then((e=>{"ok"===e.status?(this.username=e.user.name,this.api.user=e.user,this.subscribeOnEvents()):this.registerEvents()})).catch((e=>{console.error("Ошибка при проверке пользователя:",e.message),this.registerEvents()})):this.registerEvents()}bindToDOM(){this.modal=document.createElement("div"),this.modal.classList.add("modal__form","active"),this.modal.innerHTML='\n      <div class="modal__background"></div>\n      <div class="modal__content">\n        <div class="modal__header">Выберите псевдоним</div>\n        <div class="modal__body">\n          <form class="form">\n            <div class="form__group">\n              <label class="form__label" for="username">Никнейм</label>\n              <input class="form__input" id="username" type="text" placeholder="Введите никнейм" />\n              <div class="form__hint" id="error-message"></div>\n            </div>\n            <div class="modal__footer">\n              <button class="modal__ok" type="submit">Продолжить</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    ',this.container.appendChild(this.modal)}registerEvents(){const e=this.modal.querySelector(".form"),s=this.modal.querySelector("#username"),t=this.modal.querySelector("#error-message");e.addEventListener("submit",(async e=>{e.preventDefault();const n=s.value.trim();if(!n||n.length>20)t.textContent="Никнейм должен быть от 1 до 20 символов";else try{console.log("Отправляем запрос на создание пользователя:",{name:n});const e=await this.api.create({name:n});console.log("Получен ответ от сервера:",e),"ok"===e.status?(this.username=e.user.name,this.api.user=e.user,sessionStorage.setItem("currentUserId",e.user.id),this.modal.classList.remove("active"),console.log("Пользователь успешно создан:",e.user),this.subscribeOnEvents()):t.textContent="Этот никнейм уже занят"}catch(e){console.error("Ошибка при создании пользователя:",e.message),t.textContent="Произошла ошибка. Попробуйте снова."}}))}subscribeOnEvents(){console.log("Устанавливаем WebSocket-соединение..."),this.websocket=new WebSocket("wss://js-3-hw-08-ws-chat.onrender.com"),this.websocket.onopen=()=>{console.log("WebSocket connection established"),this.username&&this.api.user?.id&&(console.log("Отправляем сообщение auth:",{type:"auth",userId:this.api.user.id}),this.websocket.send(JSON.stringify({type:"auth",userId:this.api.user.id})),this.renderChatInterface())},this.websocket.onmessage=e=>{console.log("Получено сообщение через WebSocket:",e.data);const s=JSON.parse(e.data);this.isChatReady?"message"===s.type?this.renderMessage(s):"updateUsers"===s.type&&this.updateUserList(s.users):(console.log("Интерфейс чата еще не готов. Добавляем сообщение в очередь."),this.pendingMessages.push(s))},this.websocket.onclose=()=>{console.log("WebSocket-соединение закрыто")},this.websocket.onerror=e=>{console.error("WebSocket error:",e)}}renderChatInterface(){this.container.innerHTML='\n      <div class="chat">\n         \x3c!-- Левая панель: список пользователей --\x3e\n        <div class="chat__sidebar">\n          <h3>Активные пользователи</h3>\n          <div class="chat__userlist"></div>\n        </div>\n        \x3c!-- Правая панель: чат --\x3e\n        <div class="chat__main">\n          <div class="chat__messages-container"></div>\n          <form class="chat__input-form">\n            <input type="text" class="chat__input" placeholder="Введите сообщение..." />\n            <button type="submit" class="chat__send">Отправить</button>\n          </form>\n        </div>\n      </div>\n    ',this.isChatReady=!0,this.processPendingMessages();const e=document.querySelector(".chat__input-form"),s=document.querySelector(".chat__input");e.addEventListener("submit",(e=>{e.preventDefault();const t=s.value.trim();t&&(this.websocket.send(JSON.stringify({type:"send",text:t,user:this.api.user})),s.value="")}))}processPendingMessages(){if(this.isChatReady)for(;this.pendingMessages.length>0;){const e=this.pendingMessages.shift();"message"===e.type?this.renderMessage(e):"updateUsers"===e.type&&this.updateUserList(e.users)}}updateUserList(e){const s=document.querySelector(".chat__userlist");s?(console.log("Обновляем список пользователей:",e),s.innerHTML="",e.forEach((e=>{const t=e.name===this.username,n=`\n        <div class="chat__user ${t?"yourself":""}">\n          <div class="circle"></div>\n          <span>${t?"You":e.name}</span>\n        </div>\n      `;s.insertAdjacentHTML("beforeend",n)}))):console.error("Элемент .chat__userlist не найден")}renderMessage(e){const s=document.querySelector(".chat__messages-container");if(!s)return void console.error("Элемент .chat__messages-container не найден");console.log("Отображаем сообщение:",e);const t=e.user.name===this.username,n=new Date(e.timestamp),r=`${String(n.getHours()).padStart(2,"0")}:${String(n.getMinutes()).padStart(2,"0")} ${String(n.getDate()).padStart(2,"0")}.${String(n.getMonth()+1).padStart(2,"0")}.${n.getFullYear()}`,a=`\n      <div class="message__container${t?"-yourself":"-interlocutor"}">\n        <div class="message__header ${t?"yourself":""}">\n          ${t?"You":e.user.name}, ${r}\n        </div>\n        <div class="message__text">${e.text}</div>\n      </div>\n    `;s.insertAdjacentHTML("beforeend",a),s.scrollTop=s.scrollHeight}}(n).init()})();