(()=>{"use strict";class e{constructor(e){this.apiUrl=e||"/api"}list(){}get(){}create(){}update(){}delete(){}}const t=async e=>{const{method:t="GET",url:s,data:n,headers:a={}}=e,r={method:t,headers:{"Content-Type":"application/json",...a}};n&&(r.body=JSON.stringify(n));try{const e=await fetch(s,r);if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.text()}catch(e){throw console.error("Request failed:",e.message),e}};class s extends e{constructor(){super("/api"),this.user=null}async create(e){const s=await t({method:"POST",url:`${this.apiUrl}/new-user`,data:e});return JSON.parse(s)}}const n=document.getElementById("root");new class{constructor(e){this.container=e,this.api=new s,this.websocket=null,this.username=null}init(){this.bindToDOM(),this.registerEvents()}bindToDOM(){this.modal=document.createElement("div"),this.modal.classList.add("modal__form"),this.modal.innerHTML='\n      <div class="modal__background"></div>\n      <div class="modal__content">\n        <div class="modal__header">Выберите псевдоним</div>\n        <div class="modal__body">\n          <form class="form">\n            <div class="form__group">\n              <label class="form__label" for="username">Никнейм</label>\n              <input class="form__input" id="username" type="text" placeholder="Введите никнейм" />\n              <div class="form__hint" id="error-message"></div>\n            </div>\n            <div class="modal__footer">\n              <button class="modal__ok" type="submit">Продолжить</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    ',this.container.appendChild(this.modal)}registerEvents(){const e=this.modal.querySelector(".form"),t=this.modal.querySelector("#username"),s=this.modal.querySelector("#error-message");e.addEventListener("submit",(async e=>{e.preventDefault();const n=t.value.trim();if(!n||n.length>20)s.textContent="Никнейм должен быть от 1 до 20 символов";else try{const e=await this.api.create({name:n}),t=JSON.parse(e);"ok"===t.status?(this.username=t.user.name,this.modal.classList.remove("active"),this.subscribeOnEvents()):s.textContent="Этот никнейм уже занят"}catch(e){s.textContent="Произошла ошибка. Попробуйте снова."}}))}subscribeOnEvents(){this.websocket=new WebSocket(`ws://${window.location.host}`),this.websocket.onopen=()=>{this.websocket.send(JSON.stringify({type:"auth",userId:this.api.user.id}))},this.websocket.onmessage=e=>{const t=JSON.parse(e.data);"message"===t.type?this.renderMessage(t):"updateUsers"===t.type&&this.updateUserList(t.users)},this.websocket.onclose=()=>{console.log("Соединение закрыто")}}renderMessage(e){const t=document.querySelector(".chat__messages-container"),s=`\n      <div class="message__container${e.user.name===this.username?"-yourself":"-interlocutor"}">\n        <div class="message__header">\n          ${e.user.name}, ${new Date(e.timestamp).toLocaleString()}\n        </div>\n        <div class="message__text">${e.text}</div>\n      </div>\n    `;t.insertAdjacentHTML("beforeend",s),t.scrollTop=t.scrollHeight}updateUserList(e){const t=document.querySelector(".chat__userlist");t.innerHTML="",e.forEach((e=>{const s=`\n        <div class="chat__user">\n          <span style="color: ${e.name===this.username?"red":"black"}">Your</span>\n        </div>\n      `;t.insertAdjacentHTML("beforeend",s)}))}}(n).init()})();